getwd()
.libPaths()
# check working directory
getwd()
# Adjust path to renv folder which to load the packages from
getwd()
# Check path which R loads the packages from
.libPaths()
# Check path which R loads the packages from
.libPaths()
# Adjust path to renv folder which to load the packages from
getwd()
.libPaths(new=paste0(getwd(), "/renv/library/R-4.0/x86_64-w64-mingw32"))
.libPaths()
# load packages
library(slidaRtools)
# load packages
library(data.table)
library(raster)
library(rgdal)
library(rgl)
library(lidR)
# load Traunstein point cloud
pc.df <- readRDS("data\\Traunstein\\Subplot_PointCloud_Transformed.rds")
head(pc.df)
display.point.cloud(pc.df, size=2)
# install packages
install.packages('bslib')
# install packages
install.packages('bslib')
install.packages("bslib")
# Adjust path to renv folder which to load the packages from
getwd()
.libPaths()
install.packages("bslib")
# check working directory
getwd()
# Check path which R loads the packages from
.libPaths()
# Adjust path to renv folder which to load the packages from
getwd()
.libPaths(new=paste0(getwd(), "/renv/library/R-4.0/x86_64-w64-mingw32"))
.libPaths()
install.packages("bslib")
# check working directory
getwd()
# Check path which R loads the packages from
.libPaths()
# Adjust path to renv folder which to load the packages from
getwd()
.libPaths(new=paste0(getwd(), "/renv/library/R-4.0/x86_64-w64-mingw32"))
.libPaths()
install.packages("bslib")
# load packages
library(data.table)
library(raster)
library(raster)
library(rgdal)
library(rgl)
library(lidR)
library(slidaRtools)
# load Traunstein point cloud
pc.df <- readRDS("data\\Traunstein\\Subplot_PointCloud_Transformed.rds")
head(pc.df)
# derive canopy height model (CHM) from point cloud
chm.ras <- raster.from.point.cloud(pc.df, res=1, func="max")
plot(chm.ras)
chm.ras
# Convert (melt) the CHM from a raster into to a XYZ-table
chm.df <- ras2xyzdf(chm.ras)
head(chm.df)
# Assign spatial grid indices (to each CHM pixel) with a plot resolution of 50 m
chm.df$SpatID <- calc.spatial.index(xcor=chm.df$X, ycor=chm.df$Y, res=50)
head(chm.df)
tail(chm.df)
display.point.cloud(chm.df, col.var="SpatID", col.lim=c(1, 72))
# check working directory
getwd()
# Check path which R loads the packages from
.libPaths()
.libPaths(new=paste0(getwd(), "/renv/library/R-4.0/x86_64-w64-mingw32"))
.libPaths()
# load packages
library(data.table)
library(raster)
library(raster)
library(rgdal)
library(rgl)
library(lidR)
library(slidaRtools)
install.packages("xfun")
install.packages("rmarkdown")
install.packages("bslib")
install.packages("htmltools")
install.packages("bslib")
install.packages("htmltools")
remove.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools", type='source')
install.packages('make')
install.packages('make', type='source')
# load Traunstein point cloud
pc.df <- readRDS("data\\Traunstein\\Subplot_PointCloud_Transformed.rds")
head(pc.df)
# see point cloud in 3D
display.point.cloud(pc.df, size=2)
library(slidaRtools)
# see point cloud in 3D
display.point.cloud(pc.df, size=2)
# derive canopy height model (CHM) from point cloud
chm.ras <- raster.from.point.cloud(pc.df, res=1, func="max")
plot(chm.ras)
chm.ras
# Convert (melt) the CHM from a raster into to a XYZ-table
chm.df <- ras2xyzdf(chm.ras)
head(chm.df)
# Assign spatial grid indices (to each CHM pixel) with a plot resolution of 50 m
chm.df$SpatID <- calc.spatial.index(xcor=chm.df$X, ycor=chm.df$Y, res=50)
head(chm.df)
tail(chm.df)
display.point.cloud(chm.df, col.var="SpatID", col.lim=c(1, 72))
# Aggregation to get mean Z of each 50-m plot (which is TCH)
chm.dt <- data.table(chm.df)
head(chm.dt)
agg.chm.dt <- chm.dt[, .(TCH = mean(Z, na.rm=T)), keyby=SpatID]
head(agg.chm.dt)
# Load Traunstein inventory data
inv.df <- readRDS("Data\\Traunstein\\Subplot_Inventory.rds")
head(inv.df)
nrow(inv.df)
# Assign spatial grid indices (to each tree) with a plot resolution of 50 m
inv.df$SpatID <- calc.spatial.index(xcor=inv.df$X, ycor=inv.df$Y, res=50)
head(inv.df)
# Aggregation to get sum of biomass of single trees in each 50-m plot (which is AGB)
inv.dt <- data.table(inv.df)
head(inv.dt)
agg.inv.dt <- inv.dt[, .(AGB = sum(AGB, na.rm=T)), keyby=SpatID] # using "keyby" instead of "by" leads directly to sorted output
head(agg.inv.dt)
# Sort table by column SpatID
setorderv(agg.inv.dt, cols=c("SpatID"))
# Sort table by column SpatID
setorderv(agg.inv.dt, cols=c("SpatID"))
agg.inv.dt
# Convert biomass from tons per quarter hectare to tons per hectare (which is the standard unit for AGB)
agg.inv.dt$AGB <- 4*agg.inv.dt$AGB
agg.inv.dt
# Make scatterplot of biomass over height
plot(agg.inv.dt$AGB ~ agg.chm.dt$TCH, xlim=c(0, 30), ylim=c(0, 450))
# Combine the AGB column from the inventory table and the TCH column from the CHM table
metrics.dt <- cbind(agg.inv.dt, TCH=agg.chm.dt$TCH)
head(metrics.dt)
# Use nls function to fit power law
nls.AGB.TCH <- nls(AGB ~ a*TCH^b, data=metrics.dt, start=expand.grid(a=0.5, b=2))
a <- coef(nls.AGB.TCH)[1]
b <- coef(nls.AGB.TCH)[2]
curve(a*x^b, add=T, col="red")
# Load the Eberswalde lidar data
ew.las <- lidR::readLAS("Data\\Eberswalde\\419500_5853000.laz")
# Load the Eberswalde lidar data
ew.las <- lidR::readLAS("data\\Eberswalde\\419500_5853000.laz")
# Load the Eberswalde lidar data
ew.las <- lidR::readLAS("data\\Eberswalde\\419500_5853000.laz")
# Get only the lidar data.table from the las object
ew.dt <- ew.las@data
head(ew.dt)
# Plot the point cloud
plot(ew.las)
View(pc.df)
test <- readRDS("data\\Traunstein\\Subplot_PointCloud.rds")
test <- readRDS("data\\Traunstein\\Subplot_PointCloud.rds")
View(test)
test <- readlas("data\\Traunstein\\FroschhamLidarAirborne_WGS84_UTM33N.laz")
library(lidR)
test <- readlas("data\\Traunstein\\FroschhamLidarAirborne_WGS84_UTM33N.laz")
test <- readLAS("data\\Traunstein\\FroschhamLidarAirborne_WGS84_UTM33N.laz")
plot(test)
# see point cloud in 3D
display.point.cloud(pc.df, size=2)
# check working directory
getwd()
# Check path which R loads the packages from
.libPaths()
# load packages
library(data.table)
library(raster)
library(rgdal)
library(rgl)
library(lidR)
library(slidaRtools)
# install packages
library(devtools)
install_github('niknap/slidaRtools')
# install packages\
install.packages('rgdal', type='source')
# load Traunstein point cloud
pc.df <- readRDS("data\\Traunstein\\Subplot_PointCloud_Transformed.rds")
head(pc.df)
# see point cloud in 3D
display.point.cloud(pc.df, size=2)
library(rgl)
### see point cloud in 3D
# find out the H range for coloring
range(pc.df$Z)
max(pc.df$Z)
### see point cloud in 3D
# find out the H range for coloring
range(pc.df$Z)
# draw a 3D point cloud
plot3d(pc.df)
# derive canopy height model (CHM) from point cloud
chm.ras <- raster.from.point.cloud(pc.df, res=1, func="max")
lidR::rasterize_canopy(pc.df)
# create a las object from dataframe
header = LASheader(pc.df)
las = LAS(pc.df, header)
View(pc.df)
integer(pc.df$Intensity)
integer(pc.df$Intensity)
as.integer(pc.df$Intensity)
pc.df$Intensity = as.integer(pc.df$Intensity)
las = LAS(pc.df, header)
pc.df$ReturnNumber = as.integer(pc.df$ReturnNumber)
las = LAS(pc.df, header)
pc.df$NumberOfReturns = as.integer(pc.df$NumberOfReturns)
las = LAS(pc.df, header)
pc.df$ScanDirectionFlag = as.integer(pc.df$ScanDirectionFlag)
pc.df$ScanDirectionFlag = as.integer(pc.df$ScanDirectionFlag)
las = LAS(pc.df, header)
las = readLAS('data/Traunstein/FroschhamLidarAirborne_WGS84_UTM33N.laz')
plot(las)
# Load Traunstein inventory data
inv.df <- readRDS("Data\\Traunstein\\Subplot_Inventory.rds")
View(inv.df)
View(las)
View(las@data)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
unlink("TCH-to-biomass_mapping_cache", recursive = TRUE)
# check working directory
getwd()
# Check path which R loads the packages from
.libPaths()
# change path to renv folder which R should loads packages from
getwd()
.libPaths(new=paste0(getwd(), "/renv/library/R-4.0/x86_64-w64-mingw32"))
.libPaths()
